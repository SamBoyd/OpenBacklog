events {
    worker_connections 1024;
    multi_accept on;
}

http {
    # Configure logging
    log_format custom_combined '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    access_log /dev/stdout custom_combined;
    error_log /dev/stderr warn;
    
    # DNS resolver for upstream hostnames (using Google DNS and Cloudflare DNS)
    resolver 8.8.8.8 1.1.1.1 valid=300s;
    resolver_timeout 5s;
    
    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=sentry_limit:10m rate=100r/s;
    limit_req_zone $binary_remote_addr zone=mixpanel_limit:10m rate=100r/s;
    
    # Sentry Proxy Server Block
    server {
        listen 80;
        server_name ${SENTRY_DOMAIN};
        
        # Request body optimization for Sentry tunnel
        client_body_buffer_size 16k;
        client_max_body_size 10m;
        client_body_in_single_buffer on;
        client_body_timeout 30s;
        
        # Variables for dynamic proxy pass (set by Lua script)
        set $upstream_uri "";
        set $upstream_host "";
        
        # Sentry tunnel endpoint with envelope validation
        location / {
            # Apply rate limiting
            limit_req zone=sentry_limit burst=50 nodelay;
            
            # CORS headers for Sentry tunnel - allow specific domains
            set $cors_origin "";
            if ($http_origin ~* "^https://(app\.openbacklog\.ai|www\.openbacklog\.ai)$") {
                set $cors_origin $http_origin;
            }
            add_header Access-Control-Allow-Origin $cors_origin always;
            add_header Access-Control-Allow-Credentials false always;
            add_header Access-Control-Allow-Methods POST,OPTIONS always;
            add_header Access-Control-Allow-Headers sentry-trace,baggage,content-type,authorization always;
            add_header Access-Control-Expose-Headers sentry-trace always;
            
            # Hide upstream CORS headers to prevent conflicts
            proxy_hide_header Access-Control-Allow-Origin;
            proxy_hide_header Access-Control-Allow-Credentials;
            proxy_hide_header Access-Control-Allow-Methods;
            proxy_hide_header Access-Control-Allow-Headers;
            proxy_hide_header Access-Control-Expose-Headers;
            
            # Handle preflight requests
            if ($request_method = OPTIONS) {
                return 200;
            }
            
            # Run Lua script to validate envelope and set upstream variables
            access_by_lua_file /usr/local/openresty/nginx/conf/sentry_tunnel.lua;
            
            # Proxy to validated upstream URL
            proxy_pass $upstream_uri;
            proxy_set_header Host $upstream_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;  # Render handles SSL
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header User-Agent $http_user_agent;
            
            # SSL settings for upstream HTTPS connections
            proxy_ssl_verify on;
            proxy_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;
            proxy_ssl_session_reuse on;
            proxy_ssl_protocols TLSv1.2 TLSv1.3;
            proxy_ssl_server_name on;
            
            # Timeout settings
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # Disable buffering for real-time event ingestion
            proxy_buffering off;
        }
        
        # Health check for Sentry domain
        location /health {
            access_log off;
            return 200 "Sentry Tunnel OK";
            add_header Content-Type text/plain;
        }
    }
    
    # Mixpanel Proxy Server Block
    server {
        listen 80;
        server_name ${MIXPANEL_DOMAIN};
        
        # Proxy Mixpanel JavaScript library (minified)
        location /lib.min.js {
            # Apply rate limiting
            limit_req zone=mixpanel_limit burst=20 nodelay;
            
            # Cache settings for the JavaScript library
            expires 1d;
            add_header Cache-Control "public, immutable";
            
            # Proxy to Mixpanel CDN
            proxy_pass https://cdn.mxpnl.com/libs/mixpanel-2-latest.min.js;
            proxy_set_header Host cdn.mxpnl.com;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;  # Render handles SSL
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header User-Agent $http_user_agent;
            
            # Timeout settings
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }
        
        # Proxy Mixpanel JavaScript library (unminified)
        location /lib.js {
            # Apply rate limiting
            limit_req zone=mixpanel_limit burst=20 nodelay;
            
            # Cache settings for the JavaScript library
            expires 1d;
            add_header Cache-Control "public, immutable";
            
            # Proxy to Mixpanel CDN
            proxy_pass https://cdn.mxpnl.com/libs/mixpanel-2-latest.js;
            proxy_set_header Host cdn.mxpnl.com;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;  # Render handles SSL
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header User-Agent $http_user_agent;
            
            # Timeout settings
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }
        
        # Proxy Mixpanel decide endpoint
        location /decide {
            # Apply rate limiting
            limit_req zone=mixpanel_limit burst=50 nodelay;
            
            # Proxy to Mixpanel decide API
            proxy_pass https://decide.mixpanel.com/decide;
            proxy_set_header Host decide.mixpanel.com;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;  # Render handles SSL
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header User-Agent $http_user_agent;
            
            # Timeout settings
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # Disable buffering for real-time responses
            proxy_buffering off;
        }
    
        # Default location - proxy to Mixpanel API for tracking events
        location / {
            # Apply rate limiting
            limit_req zone=mixpanel_limit burst=100 nodelay;
            
            # CORS headers for tracking endpoints - allow specific domains
            set $cors_origin "";
            if ($http_origin ~* "^https://(app\.openbacklog\.ai|www\.openbacklog\.ai)$") {
                set $cors_origin $http_origin;
            }
            add_header Access-Control-Allow-Origin $cors_origin always;
            add_header Access-Control-Allow-Credentials true always;
            add_header Access-Control-Allow-Methods GET,POST,OPTIONS always;
            add_header Access-Control-Allow-Headers content-type,authorization always;
            
            # Hide upstream CORS headers to prevent conflicts
            proxy_hide_header Access-Control-Allow-Origin;
            proxy_hide_header Access-Control-Allow-Credentials;
            proxy_hide_header Access-Control-Allow-Methods;
            proxy_hide_header Access-Control-Allow-Headers;
            
            # Handle preflight requests
            if ($request_method = OPTIONS) {
                return 200;
            }
            
            # Proxy to Mixpanel API
            proxy_pass https://api-eu.mixpanel.com/;
            proxy_set_header Host api-eu.mixpanel.com;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;  # Render handles SSL
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header User-Agent $http_user_agent;
            
            # Timeout settings
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # Disable buffering for real-time event tracking
            proxy_buffering off;
        }
    }
    
    # Default server for health checks and unknown hosts
    server {
        listen 80 default_server;
        server_name _;
        
        # Health check endpoint for Render and other monitoring
        location / {
            access_log off;
            return 200 "Analytics Proxy OK - Use Host header for specific services";
            add_header Content-Type text/plain;
        }
        
        # Legacy health endpoint
        location /health {
            access_log off;
            return 200 "Analytics Proxy OK - Use Host header for specific services";
            add_header Content-Type text/plain;
        }
    }
}