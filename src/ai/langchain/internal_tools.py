"""
Internal CRUD tools for LangGraph agent.
These tools are used internally by the agent as placeholders.
Operations are tracked via callback handlers rather than thread-local storage.
"""

import uuid
from textwrap import dedent
from typing import Dict, List, Optional, Union

from langchain_core.tools import tool
from pydantic import BaseModel, Field


# Type definitions for operation data
class TaskCreateData(BaseModel):
    """Data for task creation operations"""

    initiative_identifier: str
    title: str
    description: str


class TaskUpdateData(BaseModel):
    """Data for task update operations"""

    identifier: str
    initiative_identifier: str
    title: str
    description: str


class TaskDeleteData(BaseModel):
    """Data for task deletion operations"""

    identifier: str
    initiative_identifier: str


class InitiativeTaskData(BaseModel):
    """Simplified task data for initiative creation"""

    title: str
    description: str


class InitiativeCreateData(BaseModel):
    """Data for initiative creation operations"""

    title: str
    description: str
    temporary_identifier: str
    tasks: List[InitiativeTaskData] = Field(default_factory=list)


class InitiativeUpdateData(BaseModel):
    """Data for initiative update operations"""

    identifier: str
    title: str
    description: str


class InitiativeDeleteData(BaseModel):
    """Data for initiative deletion operations"""

    identifier: str


class TaskOperation(BaseModel):
    """Represents a task operation for tracking"""

    operation_type: str  # "create", "update", "delete"
    task_data: Union[TaskCreateData, TaskUpdateData, TaskDeleteData]


class InitiativeOperation(BaseModel):
    """Represents an initiative operation for tracking"""

    operation_type: str  # "create", "update", "delete"
    initiative_data: Union[
        InitiativeCreateData, InitiativeUpdateData, InitiativeDeleteData
    ]


# Task Tools
@tool
def internal_create_task(
    initiative_identifier: str = Field(
        ...,
        description="The identifier of the initiative to add the task to, eg I-001, I-324, etc.",
    ),
    title: str = Field(..., description="The title of the task to create"),
    description: str = Field(..., description="The description of the task to create"),
) -> str:
    """Create a new task. Operation tracking handled by callback handler."""
    return f"Task '{title}' will be created on initiative '{initiative_identifier}'."


@tool
def internal_update_task(
    identifier: str = Field(..., description="The identifier of the task to update"),
    initiative_identifier: str = Field(
        ..., description="The identifier of the initiative the task belongs to"
    ),
    title: str = Field(..., description="The new title of the task"),
    description: str = Field(..., description="The new description of the task"),
) -> str:
    """Update an existing task. Operation tracking handled by callback handler."""
    return (
        f"Task '{identifier}' on initiative '{initiative_identifier}' will be updated."
    )


@tool
def internal_delete_task(
    identifier: str = Field(..., description="The identifier of the task to delete"),
    initiative_identifier: str = Field(
        ..., description="The identifier of the initiative the task belongs to"
    ),
) -> str:
    """Delete a task. Operation tracking handled by callback handler."""
    return (
        f"Task '{identifier}' on initiative '{initiative_identifier}' will be deleted."
    )


# Initiative Tools
@tool
def internal_create_initiative(
    title: str = Field(..., description="The title of the initiative to create"),
    description: str = Field(
        ..., description="The description of the initiative to create"
    ),
    temporary_identifier: str = Field(
        ...,
        description="Temporary identifier for this initiative - should be generated by the agent as TEMP-INIT-{random}",
    ),
    tasks: List[Dict[str, str]] = Field(
        ...,
        description="REQUIRED: List of tasks for this initiative. Each task MUST have 'title' and 'description' fields. Pass an empty list [] if there are no tasks. Tasks should break the initiative down to deliverable items that can be completed independently. The sum of all tasks should equal the initiative.",
    ),
) -> str:
    """Create a new initiative with tasks. Operation tracking handled by callback handler."""
    task_count = len(tasks)
    return dedent(
        f"""Initiative '{title}' will be created with temporary identifier '{temporary_identifier}' and {task_count} task(s).
        The tasks have been automatically created for this initiative.
        All tasks will use the temporary identifier '{temporary_identifier}' as their initiative_identifier.
        The sum of all the tasks should be equal to the initiative.
        """
    )


@tool
def internal_update_initiative(
    identifier: str = Field(
        ..., description="The identifier of the initiative to update"
    ),
    title: str = Field(..., description="The new title of the initiative"),
    description: str = Field(..., description="The new description of the initiative"),
) -> str:
    """Update an existing initiative. Operation tracking handled by callback handler."""
    return dedent(
        f"""Initiative '{identifier}' will be updated.
        When updating an initiative, you should always update the title and description, unless the user says otherwise.
        After updating the initiative, if the description has changed and the new is describes a different initiative 
        than the tasks do then you should use the internal task tools (internal_create_task, internal_update_task, internal_delete_task)
        to update the tasks. In the end, the sum of all the tasks should be equal to the initiative.
        """
    )


@tool
def internal_delete_initiative(
    identifier: str = Field(
        ..., description="The identifier of the initiative to delete"
    ),
) -> str:
    """Delete an initiative. Operation tracking handled by callback handler."""
    return f"Initiative '{identifier}' will be deleted."


def get_internal_task_tools():
    """Get all internal task tools"""
    return [
        internal_create_task,
        internal_update_task,
        internal_delete_task,
    ]


def get_internal_initiative_tools():
    """Get all internal initiative tools"""
    return [
        internal_create_initiative,
        internal_update_initiative,
        internal_delete_initiative,
    ]


def get_all_internal_tools():
    """Get all internal CRUD tools"""
    return get_internal_task_tools() + get_internal_initiative_tools()
