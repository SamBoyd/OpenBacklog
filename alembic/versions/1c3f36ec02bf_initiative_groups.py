"""initiative groups

Revision ID: 1c3f36ec02bf
Revises: f768a9887bf2
Create Date: 2025-05-05 19:48:38.678085

"""
from textwrap import dedent
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from src.config import settings

# revision identifiers, used by Alembic.
revision: str = '1c3f36ec02bf'
down_revision: Union[str, None] = 'f768a9887bf2'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    op.create_table('group',
        sa.Column('id', sa.UUID(), nullable=False, server_default=sa.text("gen_random_uuid()")),
        sa.Column('user_id', sa.UUID(), nullable=False, server_default=sa.text("dev.get_user_id_from_jwt()")),
        sa.Column('workspace_id', sa.UUID(), nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('description', sa.String(), nullable=True),
        sa.Column('group_type', sa.Enum('EXPLICIT', 'SMART', name='grouptype', schema='dev'), nullable=False),
        sa.Column('group_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('query_criteria', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('parent_group_id', sa.UUID(), nullable=True),
        sa.ForeignKeyConstraint(['parent_group_id'], ['dev.group.id'], ondelete='cascade'),
        sa.ForeignKeyConstraint(['user_id'], ['private.users.id'], ondelete='cascade'),
        sa.ForeignKeyConstraint(['workspace_id'], ['dev.workspace.id'], ondelete='cascade'),
        sa.PrimaryKeyConstraint('id'),
        schema='dev'
    )
    op.create_index(op.f('ix_dev_group_user_id'), 'group', ['user_id'], unique=False, schema='dev')
    op.create_index(op.f('ix_dev_group_workspace_id'), 'group', ['workspace_id'], unique=False, schema='dev')

    op.add_column('initiative', sa.Column('blocked_by_id', sa.UUID(), nullable=True), schema='dev')
    op.create_foreign_key(
        constraint_name='fk_initiative_blocked_by_id',
        source_table='initiative',
        referent_table='initiative',
        local_cols=['blocked_by_id'],
        remote_cols=['id'],
        source_schema='dev',
        referent_schema='dev'
    )
    op.create_index(op.f('ix_dev_initiative_blocked_by_id'), 'initiative', ['blocked_by_id'], unique=False, schema='dev')

    op.create_table('initiative_group',
        sa.Column('user_id', sa.UUID(), nullable=False, server_default=sa.text("dev.get_user_id_from_jwt()")),
        sa.Column('initiative_id', sa.UUID(), nullable=False),
        sa.Column('group_id', sa.UUID(), nullable=False),
        sa.Column('position', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(['group_id'], ['dev.group.id'], ondelete='cascade'),
        sa.ForeignKeyConstraint(['initiative_id'], ['dev.initiative.id'],ondelete='cascade' ),
        sa.PrimaryKeyConstraint('initiative_id', 'group_id'),
        schema='dev'
    )


    op.execute(
        dedent(
            f"""
            ALTER TABLE dev.group ENABLE ROW LEVEL SECURITY;
            
            CREATE POLICY group_policy ON dev.group
                USING (user_id = dev.get_user_id_from_jwt())
                WITH CHECK (user_id = dev.get_user_id_from_jwt()); 

            GRANT SELECT, UPDATE, DELETE, INSERT ON TABLE dev.group TO {settings.postgrest_authenticated_role};
            """
        )
    )

    op.execute(
        dedent(
            f"""
            ALTER TABLE dev.initiative_group ENABLE ROW LEVEL SECURITY;

            CREATE POLICY initiative_group_policy ON dev.initiative_group
                USING (user_id = dev.get_user_id_from_jwt())
                WITH CHECK (user_id = dev.get_user_id_from_jwt()); 


            GRANT SELECT, UPDATE, DELETE, INSERT ON TABLE dev.initiative_group TO {settings.postgrest_authenticated_role};
            """
        )
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('initiative_group', schema='dev')

    op.drop_constraint('fk_initiative_blocked_by_id', 'initiative', schema='dev', type_='foreignkey')
    op.drop_index(op.f('ix_dev_initiative_blocked_by_id'), table_name='initiative', schema='dev')
    op.drop_column('initiative', 'blocked_by_id', schema='dev')

    op.drop_index(op.f('ix_dev_group_workspace_id'), table_name='group', schema='dev')
    op.drop_index(op.f('ix_dev_group_user_id'), table_name='group', schema='dev')
    op.drop_table('group', schema='dev')

    # Define the enum type here for the downgrade operation
    group_type_enum = postgresql.ENUM('EXPLICIT', 'SMART', name='grouptype', schema='dev')
    bind = op.get_bind()
    if bind.dialect.name == "postgresql":
        group_type_enum.drop(bind, checkfirst=True)
    # ### end Alembic commands ###
