"""add field definition

Revision ID: f768a9887bf2
Revises: 32795b3b5f76
Create Date: 2025-05-03 16:40:50.757795

"""
from textwrap import dedent
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa

from sqlalchemy.dialects import postgresql

from src.config import settings

# revision identifiers, used by Alembic.
revision: str = 'f768a9887bf2'
down_revision: Union[str, None] = '32795b3b5f76'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

# Define Enum values for clarity
ENTITY_TYPES = ('INITIATIVE', 'TASK')
FIELD_TYPES = (
    'TEXT', 'NUMBER', 'SELECT', 'MULTI_SELECT', 'STATUS',
    'DATE', 'CHECKBOX', 'URL', 'EMAIL', 'PHONE'
)

def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    op.create_table('field_definition',
        sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
        sa.Column('initiative_id', sa.UUID(), nullable=True),
        sa.Column('task_id', sa.UUID(), nullable=True),
        sa.Column('workspace_id', sa.UUID(), nullable=False),
        sa.Column('user_id', sa.UUID(), nullable=False, server_default=sa.text("dev.get_user_id_from_jwt()")),
        # Reference the created ENUM type
        sa.Column('entity_type', sa.Enum(*ENTITY_TYPES, name='entitytype', schema='dev', native_enum=True), nullable=False),
        sa.Column('key', sa.String(), nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        # Reference the created ENUM type
        sa.Column('field_type', sa.Enum(*FIELD_TYPES, name='fieldtype', schema='dev', native_enum=True), nullable=False),
        sa.Column('is_core', sa.Boolean(), server_default=sa.text('false'), nullable=False),
        sa.Column('column_name', sa.String(), nullable=True),
        sa.Column('config', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), nullable=False),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.ForeignKeyConstraint(['workspace_id'], ['dev.workspace.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['initiative_id'], ['dev.initiative.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['task_id'], ['dev.task.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('workspace_id', 'entity_type', 'key', name='uq_field_definition_workspace_entity_key'),
        schema='dev'
    )
    op.create_index(op.f('ix_dev_field_definition_id'), 'field_definition', ['id'], unique=False, schema='dev')
    op.create_index(op.f('ix_dev_field_definition_workspace_id'), 'field_definition', ['workspace_id'], unique=False, schema='dev')
    # ### end Alembic commands ###

    op.execute("ALTER TABLE dev.task ADD COLUMN properties JSONB DEFAULT '{}'::jsonb")
    op.execute("ALTER TABLE dev.initiative ADD COLUMN properties JSONB DEFAULT '{}'::jsonb")

    op.execute(
        dedent(
            f"""
            ALTER TABLE dev.field_definition ENABLE ROW LEVEL SECURITY;
            
            CREATE POLICY field_definition_policy ON dev.field_definition
                USING (user_id = dev.get_user_id_from_jwt())
                WITH CHECK (user_id = dev.get_user_id_from_jwt()); 

            GRANT SELECT, UPDATE, DELETE, INSERT ON TABLE dev.field_definition TO {settings.postgrest_authenticated_role};
            """
        )
    )


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_dev_field_definition_workspace_id'), table_name='field_definition', schema='dev')
    op.drop_index(op.f('ix_dev_field_definition_id'), table_name='field_definition', schema='dev')
    op.drop_table('field_definition', schema='dev')
    op.execute("ALTER TABLE dev.task DROP COLUMN properties")
    op.execute("ALTER TABLE dev.initiative DROP COLUMN properties")

    # Explicitly drop ENUM types in PostgreSQL
    op.execute("DROP TYPE dev.entitytype")
    op.execute("DROP TYPE dev.fieldtype")
    # ### end Alembic commands ###
