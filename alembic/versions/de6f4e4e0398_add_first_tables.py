"""add first tables

Revision ID: de6f4e4e0398
Revises: e1cce05dbbec
Create Date: 2025-01-04 13:06:09.882538

"""

from textwrap import dedent
from typing import Sequence, Union
import uuid

from alembic import op
import sqlalchemy as sa


from src.config import settings

# revision identifiers, used by Alembic.
revision: str = 'de6f4e4e0398'
down_revision: Union[str, None] = 'e1cce05dbbec'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "users",
        sa.Column("name", sa.String(), nullable=True),
        sa.Column("last_logged_in", sa.DateTime(), nullable=False, server_default=sa.text("now()")),
        sa.Column("id", sa.UUID(), nullable=False, default=uuid.uuid4, server_default=sa.text("gen_random_uuid()")),
        sa.Column("email", sa.String(length=320), nullable=False),
        sa.Column("hashed_password", sa.String(length=1024), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("is_superuser", sa.Boolean(), nullable=False),
        sa.Column("is_verified", sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        schema="private",
    )
    op.create_index(
        op.f("ix_private_users_email"),
        "users",
        ["email"],
        unique=True,
        schema="private",
    )
    op.create_table(
        "initiative",
        sa.Column("type", sa.String(), nullable=True),
        sa.Column("progress", sa.Float(), nullable=True),
        sa.Column(
            "id", sa.UUID(), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column("identifier", sa.String(), nullable=False),
        sa.Column(
            "user_id", sa.UUID(), nullable=False
        ),
        sa.Column("title", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("order", sa.Integer(), nullable=False, server_default="0"),
        sa.Column("created_at", sa.DateTime(), nullable=False, server_default=sa.text("now()")),
        sa.Column("updated_at", sa.DateTime(), nullable=False, server_default=sa.text("now()")),
        sa.Column(
            "status",
            sa.Enum(
                "BACKLOG",
                "TO_DO",
                "IN_PROGRESS",
                "BLOCKED",
                "DONE",
                "ARCHIVED",
                name="initiativestatus",
                schema="dev",
            ),
            nullable=False,
            server_default="TO_DO",
        ),
        sa.ForeignKeyConstraint(["user_id"], ["private.users.id"], ondelete="cascade"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "user_id", "identifier", name="uq_initiative_user_id_identifier"
        ),
        schema="dev",
    )
    op.create_index(
        op.f("ix_dev_initiative_id"), "initiative", ["id"], unique=False, schema="dev"
    )
    op.create_index(
        op.f("ix_dev_initiative_user_id"),
        "initiative",
        ["user_id"],
        unique=False,
        schema="dev",
    )
    op.create_table(
        "access_token",
        sa.Column(
            "user_id", sa.UUID(), nullable=False
        ),
        sa.Column("token", sa.String(length=43), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(["user_id"], ["private.users.id"], ondelete="cascade"),
        sa.PrimaryKeyConstraint("token"),
        schema="private",
    )
    op.create_index(
        op.f("ix_private_access_token_created_at"),
        "access_token",
        ["created_at"],
        unique=False,
        schema="private",
    )
    op.create_table(
        "oauth_account",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column(
            "user_id", sa.UUID(), nullable=False
        ),
        sa.Column("oauth_name", sa.String(length=100), nullable=False),
        sa.Column("access_token", sa.String(length=1024), nullable=False),
        sa.Column("expires_at", sa.Integer(), nullable=True),
        sa.Column("refresh_token", sa.String(length=1024), nullable=True),
        sa.Column("account_id", sa.String(length=320), nullable=False),
        sa.Column("account_email", sa.String(length=320), nullable=False),
        sa.ForeignKeyConstraint(["user_id"], ["private.users.id"], ondelete="cascade"),
        sa.PrimaryKeyConstraint("id"),
        schema="private",
    )
    op.create_index(
        op.f("ix_public_oauth_account_account_id"),
        "oauth_account",
        ["account_id"],
        unique=False,
        schema="private",
    )
    op.create_index(
        op.f("ix_public_oauth_account_oauth_name"),
        "oauth_account",
        ["oauth_name"],
        unique=False,
        schema="private",
    )
    op.create_table(
        "task",
        sa.Column("type", sa.String(), nullable=True),
        sa.Column("initiative_id", sa.UUID(), nullable=False),
        sa.Column(
            "id", sa.UUID(), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column("identifier", sa.String(), nullable=False),
        sa.Column(
            "user_id", sa.UUID(), nullable=False
        ),
        sa.Column("title", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("order", sa.Integer(), nullable=False, server_default="0"),
        sa.Column("created_at", sa.DateTime(), nullable=False, server_default=sa.text("now()")),
        sa.Column("updated_at", sa.DateTime(), nullable=False, server_default=sa.text("now()")),
        sa.Column(
            "status",
            sa.Enum(
                "TO_DO",
                "IN_PROGRESS",
                "BLOCKED",
                "DONE",
                "ARCHIVED",
                name="taskstatus",
                schema="dev",
            ),
            nullable=False,
            server_default="TO_DO",
        ),
        sa.ForeignKeyConstraint(
            ["initiative_id"],
            ["dev.initiative.id"],
        ),
        sa.ForeignKeyConstraint(["user_id"], ["private.users.id"], ondelete="cascade"),
        sa.PrimaryKeyConstraint("id"),
        schema="dev",
    )
    op.create_index(op.f("ix_dev_task_id"), "task", ["id"], unique=False, schema="dev")
    op.create_index(
        op.f("ix_dev_task_user_id"), "task", ["user_id"], unique=False, schema="dev"
    )
    
    op.create_table(
        "checklist",
        sa.Column(
            "user_id", sa.UUID(), nullable=False
        ),
        sa.Column("id", sa.UUID(), server_default=sa.text("gen_random_uuid()"), nullable=False),
        sa.Column("title", sa.String(), nullable=False),
        sa.Column("is_complete", sa.Boolean(), nullable=False, server_default="false"),
        sa.Column("order", sa.Integer(), nullable=False, server_default="0"),
        sa.Column("task_id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["task_id"],
            ["dev.task.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.ForeignKeyConstraint(["user_id"], ["private.users.id"], ondelete="cascade"),
        schema="dev",
    )
    op.create_index(
        op.f("ix_dev_checklist_id"),
        "checklist",
        ["id"],
        unique=False,
        schema="dev",
    )
    # ### end Alembic commands ###

    op.execute(
        dedent(
            f"""
            GRANT SELECT, UPDATE, DELETE, INSERT ON ALL TABLES IN SCHEMA dev TO {settings.postgrest_authenticated_role};
            """
        )
    )


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        op.f("ix_dev_checklist_id"), table_name="checklist", schema="dev"
    )
    op.drop_table("checklist", schema="dev")

    op.drop_index(op.f("ix_dev_task_user_id"), table_name="task", schema="dev")
    op.drop_index(op.f("ix_dev_task_id"), table_name="task", schema="dev")
    op.drop_table("task", schema="dev")
    op.drop_index(
        op.f("ix_public_oauth_account_oauth_name"),
        table_name="oauth_account",
        schema="private",
    )
    op.drop_index(
        op.f("ix_public_oauth_account_account_id"),
        table_name="oauth_account",
        schema="private"
    )
    op.drop_table("oauth_account", schema="private")
    op.drop_index(
        op.f("ix_private_access_token_created_at"),
        table_name="access_token",
        schema="private",
    )
    op.drop_table("access_token", schema="private")
    op.drop_index(
        op.f("ix_dev_initiative_user_id"), table_name="initiative", schema="dev"
    )
    op.drop_index(op.f("ix_dev_initiative_id"), table_name="initiative", schema="dev")
    op.drop_table("initiative", schema="dev")
    op.drop_index(op.f("ix_private_users_email"), table_name="users", schema="private")
    op.drop_table("users", schema="private")
    # ### end Alembic commands ###
