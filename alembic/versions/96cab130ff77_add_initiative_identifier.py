"""add initiative identifier

Revision ID: 96cab130ff77
Revises: eb4152b94c58
Create Date: 2025-01-04 13:34:53.411088

"""

from textwrap import dedent
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa



# revision identifiers, used by Alembic.
revision: str = "96cab130ff77"
down_revision: Union[str, None] = "eb4152b94c58"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

from src.config import settings


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("SET search_path TO private, public;")
    op.execute(
        dedent(
            f"""
            CREATE TABLE dev.user_initiative_counter (
                user_id UUID PRIMARY KEY REFERENCES private.users (id) ON DELETE CASCADE,
                last_value INT NOT NULL DEFAULT 0
            );

            ALTER TABLE dev.user_initiative_counter ENABLE ROW LEVEL SECURITY;
            
            CREATE POLICY user_initiative_counter_policy ON dev.user_initiative_counter
                USING (user_id = dev.get_user_id_from_jwt())
                WITH CHECK (user_id = dev.get_user_id_from_jwt()); 

            GRANT SELECT, UPDATE, INSERT ON TABLE dev.user_initiative_counter TO {settings.postgrest_authenticated_role};
        """
        )
    )

    op.alter_column(
        "user_initiative_counter",
        "user_id",
        schema="dev",
        server_default=sa.text("dev.get_user_id_from_jwt()"),
    )

    op.execute(
        dedent(
            """
                CREATE OR REPLACE FUNCTION dev.set_initiative_identifier() 
                RETURNS TRIGGER AS $$
                DECLARE
                new_value INT;
                BEGIN
                -- If identifier is already supplied, skip
                IF NEW.identifier IS NOT NULL THEN
                    RETURN NEW;
                END IF;

                RAISE NOTICE 'NEW.user_id initial: %', NEW.user_id;

                -- Ensure user_id is set from JWT if not already set
                IF NEW.user_id IS NULL THEN
                    NEW.user_id = dev.get_user_id_from_jwt();
                END IF;
                
                RAISE NOTICE 'NEW.user_id final: %', NEW.user_id;

                -- 1) Lock the counter for the specific user 
                --    Insert a row if it doesn't exist (i.e., first time for that user)
                INSERT INTO dev.user_initiative_counter(user_id, last_value)
                    VALUES (NEW.user_id, 0)
                    ON CONFLICT (user_id) DO NOTHING; 
                
                -- 2) Fetch & increment the last_value in one shot (atomic)
                UPDATE dev.user_initiative_counter
                    SET last_value = last_value + 1
                    WHERE user_id = NEW.user_id
                    RETURNING last_value INTO new_value;
                
                -- 3) Build the identifier string
                NEW.identifier = 'I-' || to_char(new_value, 'FM000');  -- e.g. "I-001", "I-123"
                
                RETURN NEW;
                END;
                $$ LANGUAGE plpgsql;
            """
        )
    )

    op.execute(
        dedent(
            """
                CREATE TRIGGER trg_initiative_identifier
                BEFORE INSERT ON dev.initiative
                FOR EACH ROW
                EXECUTE FUNCTION dev.set_initiative_identifier();
            """
        )
    )
    # ### end Alembic commands ###

    op.execute(
        dedent(
            f"""
            GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA dev TO {settings.postgrest_authenticated_role};
            """
        )
    )


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("SET search_path TO private, public;")
    op.execute("DROP TRIGGER trg_initiative_identifier ON initiative;")
    op.execute("DROP FUNCTION set_initiative_identifier();")
    op.drop_table("dev.user_initiative_counter")
    # ### end Alembic commands ###
