"""Add workspace model and relationships

Revision ID: 8751db1a83f8
Revises: 948197b7436e
Create Date: 2025-03-02 13:52:40.209240

"""
from textwrap import dedent
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


from src.config import settings

# revision identifiers, used by Alembic.
revision: str = '8751db1a83f8'
down_revision: Union[str, None] = '948197b7436e'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('workspace',
        sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('description', sa.String(), nullable=True),
        sa.Column('icon', sa.String(), nullable=True),
        sa.Column('user_id', sa.UUID(), nullable=False),
        sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
        sa.ForeignKeyConstraint(['user_id'], ['private.users.id'], ondelete='cascade'),
        sa.PrimaryKeyConstraint('id'),
        schema='dev'
    )
    op.create_index(op.f('ix_dev_workspace_id'), 'workspace', ['id'], unique=False, schema='dev')
    op.create_index(op.f('ix_dev_workspace_user_id'), 'workspace', ['user_id'], unique=False, schema='dev')

    op.execute(
        dedent(
            f"""
            ALTER TABLE dev.workspace ENABLE ROW LEVEL SECURITY;

            CREATE POLICY user_workspace_policy ON dev.workspace
            USING (user_id = dev.get_user_id_from_jwt())
            WITH CHECK (user_id = dev.get_user_id_from_jwt());  

            GRANT SELECT, UPDATE, DELETE, INSERT ON TABLE dev.workspace TO {settings.postgrest_authenticated_role};
        """
        )
    )

    op.alter_column(
        "workspace",
        "user_id",
        schema="dev",
        server_default=sa.text("dev.get_user_id_from_jwt()"),
    )

    op.add_column(
        'task',
        sa.Column('workspace_id', sa.UUID(), nullable=False),
        schema='dev',
    )
    op.create_foreign_key(None, 'task', 'workspace', ['workspace_id'], ['id'], source_schema='dev', referent_schema='dev', ondelete='CASCADE')
    op.create_index(op.f('ix_dev_task_workspace_id'), 'task', ['workspace_id'], unique=False, schema='dev')

    op.add_column(
        'initiative',
        sa.Column('workspace_id', sa.UUID(), nullable=False),
        schema='dev',
    )
    op.create_foreign_key(None, 'initiative', 'workspace', ['workspace_id'], ['id'], source_schema='dev', referent_schema='dev', ondelete='CASCADE')
    op.create_index(op.f('ix_dev_initiative_workspace_id'), 'initiative', ['workspace_id'], unique=False, schema='dev')

    op.add_column('github_installation', sa.Column('workspace_id', sa.UUID(), nullable=True), schema='private')
    op.drop_index('ix_dev_github_installation_user_id', table_name='github_installation', schema='private')
    op.create_index(op.f('ix_private_github_installation_user_id'), 'github_installation', ['user_id'], unique=False, schema='private')
    op.create_index(op.f('ix_private_github_installation_workspace_id'), 'github_installation', ['workspace_id'], unique=False, schema='private')
    op.create_foreign_key(None, 'github_installation', 'workspace', ['workspace_id'], ['id'], source_schema='private', referent_schema='dev')

    # Restrict users to a single workspace
    op.execute(
        dedent(
            """
            CREATE POLICY no_multiple_workspace_for_user ON dev.workspace
            FOR INSERT
            WITH CHECK (
                NOT EXISTS (
                    SELECT 1 FROM dev.workspace AS ws
                    WHERE ws.user_id = dev.get_user_id_from_jwt()
                )
            );

            -- Use a partial unique index that will allow updates
            CREATE UNIQUE INDEX unique_workspace_per_user ON dev.workspace(user_id) 
            WHERE id IS NOT NULL;

            """
        )
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'github_installation', schema='private', type_='foreignkey')
    op.drop_index(op.f('ix_private_github_installation_workspace_id'), table_name='github_installation', schema='private')
    op.drop_index(op.f('ix_private_github_installation_user_id'), table_name='github_installation', schema='private')
    op.create_index('ix_dev_github_installation_user_id', 'github_installation', ['user_id'], unique=False, schema='private')
    op.drop_column('github_installation', 'workspace_id', schema='private')
    
    op.drop_index(op.f('ix_dev_workspace_user_id'), table_name='workspace', schema='dev')
    op.drop_index(op.f('ix_dev_workspace_id'), table_name='workspace', schema='dev')
    op.drop_index(op.f('ix_dev_task_workspace_id'), table_name='task', schema='dev')
    op.drop_index(op.f('ix_dev_initiative_workspace_id'), table_name='initiative', schema='dev')

    op.drop_constraint(None, 'initiative', schema='dev', type_='foreignkey')
    op.drop_constraint(None, 'tasks', schema='dev', type_='foreignkey')
    
    op.drop_table('workspace', schema='dev')
    # ### end Alembic commands ###
