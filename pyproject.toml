[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | mutants
)/
'''

[tool.isort]
profile = "black"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-p no:cacheprovider --cov=src --no-cov-on-fail"
testpaths = ["./tests"]
markers = [
    "end2end: mark test as an end-to-end test.",
    "fast: mark test as fast-running for CI (< 30s total)",
    "slow: mark test as slow-running (> 30s)",
    "performance: mark test as performance tracking with detailed metrics",
    "contracts: mark test as contract validation",
    "golden: mark test as golden dataset validation",
    "agent: mark test as agent-specific test"
]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
pythonpath = "."

[tool.mutmut]
runner = "python -m pytest --no-cov -p no:cacheprovider"
max_stack_depth = "4"
paths_to_mutate = ["src/"]
tests_dir = "tests"
also_copy=["pyproject.toml", "tests/conftest.py", "/static/react-components/build/*", "templates"]

[tool.mypy]
python_version = "3.12"
packages="src"
exclude = [
    "build",
    "dist",
    "tests",
    "venv",
]
disallow_untyped_defs = true
disallow_untyped_calls = true
disallow_incomplete_defs = true
disallow_untyped_decorators = false
disallow_any_generics = false
disallow_subclassing_any = false
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
warn_return_any = true
warn_unreachable = true
warn_no_return = true
strict = true
show_error_codes = true
pretty = true
show_column_numbers = true
show_error_context = true
ignore_missing_imports = true
follow_imports = "silent"
strict_optional = true
no_implicit_optional = true
implicit_reexport = false
local_partial_types = true
plugins = ["sqlalchemy.ext.mypy.plugin"]

[tool.bandit]
exclude_dirs = ["browser_functional_tests", "static", "scripts", "tests", "src/auth/providers/dev.py"]

[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "taskmanagement"
version = "0.1.0"

description = "A development task manager and product management tool for solo and hobbyist developers."
authors = [{ name = "Sam Boyd", email = "samboyd10@gmail.com" }]
dynamic = ["dependencies"]

[tool.setuptools.dynamic]
dependencies = {file = ["requirements.txt"]}
